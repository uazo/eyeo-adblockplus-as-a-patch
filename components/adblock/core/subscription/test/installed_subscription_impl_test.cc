/*
 * This file is part of eyeo Chromium SDK,
 * Copyright (C) 2006-present eyeo GmbH
 *
 * eyeo Chromium SDK is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * eyeo Chromium SDK is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "components/adblock/core/subscription/installed_subscription_impl.h"

#include <memory>
#include <vector>

#include "base/memory/scoped_refptr.h"
#include "base/strings/stringprintf.h"
#include "components/adblock/core/common/content_type.h"
#include "components/adblock/core/common/flatbuffer_data.h"
#include "components/adblock/core/converter/flatbuffer_converter.h"
#include "components/adblock/core/subscription/installed_subscription.h"
#include "components/adblock/core/subscription/regex_matcher.h"
#include "components/grit/components_resources.h"
#include "testing/gmock/include/gmock/gmock.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace adblock {
namespace {

// NOTE! More tests of InstalledSubscriptionImpl are in converter_test.cc. The
// behavior of InstalledSubscriptionImpl is tightly coupled with the flatbuffer
// data generated by the Converter, so they're tested together.

class MockBuffer : public FlatbufferData {
 public:
  MockBuffer()
      : real_data_(
            FlatbufferConverter::Convert({},
                                         GURL{"http://data.com/filters.txt"},
                                         false)) {}
  MOCK_METHOD(void, PermanentlyRemoveSourceOnDestruction, (), (override));

  const uint8_t* data() const override { return real_data_->data(); }
  size_t size() const override { return real_data_->size(); }

  std::unique_ptr<FlatbufferData> real_data_;
};

}  // namespace

TEST(AdblockInstalledSubscriptionImplTest,
     MarkForPermanentRemovalTriggersSourceRemoval) {
  auto buffer = std::make_unique<MockBuffer>();
  EXPECT_CALL(*buffer, PermanentlyRemoveSourceOnDestruction());
  auto subscription = base::MakeRefCounted<InstalledSubscriptionImpl>(
      std::move(buffer), Subscription::InstallationState::Installed,
      base::Time());
  subscription->MarkForPermanentRemoval();
}

TEST(AdblockInstalledSubscriptionImplTest,
     NormalDestructionDoesNotTriggerSourceRemoval) {
  auto buffer = std::make_unique<MockBuffer>();
  EXPECT_CALL(*buffer, PermanentlyRemoveSourceOnDestruction()).Times(0);
  auto subscription = base::MakeRefCounted<InstalledSubscriptionImpl>(
      std::move(buffer), Subscription::InstallationState::Installed,
      base::Time());
  subscription.reset();
}

TEST(AdblockInstalledSubscriptionImplTest, InstallationStateAndDateReported) {
  const auto installation_time =
      base::Time::FromDeltaSinceWindowsEpoch(base::Seconds(30));
  const auto installation_state = Subscription::InstallationState::Preloaded;
  auto subscription = base::MakeRefCounted<InstalledSubscriptionImpl>(
      std::make_unique<MockBuffer>(), installation_state, installation_time);
  EXPECT_EQ(subscription->GetInstallationState(), installation_state);
  EXPECT_EQ(subscription->GetInstallationTime(), installation_time);
}

TEST(AdblockInstalledSubscriptionImplTest,
     ConvertMoreRegexFiltersThanCacheCapacity) {
  std::vector<std::string> filters;
  // Create a lot of regex filters
  for (int i = 0; i < RegexMatcher::kMaxPrebuiltPatterns; i++) {
    // Match any word followed by the numerical value of i, then another word.
    filters.push_back(base::StringPrintf("/.*word%dword.*/", i));
  }
  // Add one more, this one will not get prebuilt
  filters.push_back(base::StringPrintf("/.*word%dword.*/", 1000));

  auto buffer = FlatbufferConverter::Convert(
      filters, GURL{"http://data.com/filters.txt"}, false);
  ASSERT_TRUE(buffer);
  auto subscription = base::MakeRefCounted<InstalledSubscriptionImpl>(
      std::move(buffer), Subscription::InstallationState::Installed,
      base::Time());
  // Ensure a URL that matches our "extra" regex filter is matched.
  EXPECT_TRUE(subscription->HasUrlFilter(
      GURL("https://word1000word.com/ad.jpg"), "example.com",
      ContentType::Image, {}, FilterCategory::Blocking));
}

}  // namespace adblock
